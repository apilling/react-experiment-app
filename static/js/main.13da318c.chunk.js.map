{"version":3,"sources":["components/CardViewer.tsx","components/userList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","Col","Body","Title","Text","prompt","answer","UserList","users","setUsers","items","onChange","newUsers","console","log","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","ControlPanel","setCard","reveal","deck","showAddCardModal","useState","rawUsers","localStorage","getItem","JSON","parse","getLocalStorageUsers","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setPrompt","setAnswer","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","kind","App","CARDS","activeCard","setActiveCard","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13da318c.chunk.js","sourcesContent":["import { Col, Card as BootstrapCard } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\n\r\nexport function CardViewer({card, answerRevealed}: {card: Card, answerRevealed: boolean}) : JSX.Element {\r\n    return <Col>\r\n        <BootstrapCard>\r\n            <BootstrapCard.Body>\r\n                <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\r\n                <BootstrapCard.Text>\r\n                    <strong>Prompt:</strong> {card.prompt}\r\n                </BootstrapCard.Text>\r\n                {answerRevealed && <BootstrapCard.Text>\r\n                    <strong>Answer:</strong> {card.answer}\r\n                </BootstrapCard.Text>}\r\n            </BootstrapCard.Body>\r\n        </BootstrapCard>\r\n        \r\n    </Col>\r\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\r\n\r\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[]) => void}): JSX.Element {\r\n\r\n    function handleChange(newUsers: Task[]): void {\r\n        setUsers(newUsers);\r\n        console.log(newUsers);\r\n    }\r\n\r\n    return <EditableDndList items={users} onChange={handleChange}/>;\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\nimport CARDS from '../assets/cards.json';\r\nimport { getRandomElement, shuffle } from '../utilities/data';\r\nimport { UserList } from './userList';\r\nimport { useState } from 'react';\r\nimport { Task as User} from 'editable-dnd-list';\r\n\r\nexport const LOCAL_STORAGE_USERS = 'ta-trainer-users';\r\n\r\nexport const INITIAL_USERS: User[] = [\r\n    {id: '1', text: \"Alex\"},\r\n    {id: '2', text: \"Xandy\"},\r\n    {id: '3', text: \"Emily\"},\r\n    {id: '4', text: \"Aida\"},\r\n    {id: '5', text: \"Mark\"}\r\n];\r\n\r\nexport function getLocalStorageUsers(): User[] {\r\n    let rawUsers: string | null = localStorage.getItem(LOCAL_STORAGE_USERS);\r\n    if (rawUsers === null) {\r\n        return [...INITIAL_USERS];\r\n    } else {\r\n        return JSON.parse(rawUsers);\r\n    }\r\n}\r\n\r\nexport function ControlPanel({setCard, reveal, answerRevealed, deck, showAddCardModal}: \r\n    {setCard: (c: Card)=>void, reveal: (r: boolean) => void, answerRevealed: boolean, deck: Card[], showAddCardModal: (b: boolean) => void}) : JSX.Element {\r\n    const [users, setUsers] = useState<User[]>(getLocalStorageUsers());\r\n    \r\n    \r\n    function setRandomCard() {\r\n        reveal(false);\r\n        setCard(getRandomElement(deck))\r\n    }\r\n\r\n    function shuffleUsers() {\r\n        let shuffledUsers: User[] = shuffle(users);\r\n        setUsers([...shuffledUsers]);\r\n    }\r\n\r\n    function save() {\r\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\r\n    }\r\n\r\n    function addNewCard() {\r\n        showAddCardModal(true);\r\n    }\r\n\r\n    return <Col>\r\n        <h1>Control Panel</h1>\r\n        <UserList users={users} setUsers={setUsers}></UserList>\r\n        <Button onClick={setRandomCard} className='m-4'>Swap Current Card</Button>\r\n        <Button onClick={() => reveal(!answerRevealed)} className='m-4'>Reveal Answer</Button>\r\n        <Button onClick={shuffleUsers} className='m-4'>Shuffle Users</Button>\r\n        <Button onClick={save} className='m-4' variant = 'success'>Save</Button>\r\n        <Button onClick={addNewCard} className='m-4' >Add New Card</Button>\r\n    </Col>\r\n    }","\r\n// https://stackoverflow.com/a/5915122/1718155\r\n/**\r\n * Grab a random element from a list\r\n * @param items Any kind of list\r\n * @returns One randomly chosen element\r\n */\r\n\r\nexport function getRandomElement<T>(items: T[]): T{\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\n// https://stackoverflow.com/a/2450976\r\n/**\r\n * Shuffles an array in-place\r\n * @param array any array of elements\r\n * @returns the shuffled array (modified in-place)\r\n */\r\n\r\nexport function shuffle<T>(array: T[]): T[] {\r\n    let currentIndex = array.length,  randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n  \r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n  \r\n    return array;\r\n  }\r\n  ","import React, { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Card } from \"../interfaces/card\";\r\n\r\n\r\nexport function AddCardModal({visible, setVisible, addCard}: {visible: boolean, setVisible: (b: boolean) => void, addCard: (c: Card) => void}): JSX.Element {\r\n    const [prompt,setPrompt] = useState<string>(\"PROMPT TEXT\");\r\n    const [answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\r\n\r\n    function saveCard() {\r\n        console.log(\"SAVING\", prompt, answer);\r\n        addCard({\r\n            id: Math.random(),\r\n            kind: \"Custom\",\r\n            prompt,\r\n            answer\r\n        });\r\n        setVisible(false);\r\n    }\r\n    \r\n    const hide = () => setVisible(false);\r\n\r\n    return (\r\n    <Modal show={visible} onHide={hide}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Add New Card</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n        <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\r\n                <Form.Label>Prompt</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} \r\n                value={prompt}\r\n                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setPrompt(ev.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\r\n                <Form.Label>Suggested Answer</Form.Label>\r\n                <Form.Control as=\"textarea\" rows={3} \r\n                value={answer}\r\n                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)}/>\r\n            </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n            <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\r\n        </Modal.Footer>\r\n    </Modal>)\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport CARDS from \"./assets/cards.json\";\nimport { CardViewer } from './components/CardViewer';\nimport { ControlPanel } from './components/ControlPanel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap';\nimport { Card } from './interfaces/card';\nimport { AddCardModal } from './components/AddCardModal';\n\n\n\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  const [answerRevealed, reveal] = useState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Card[]>(CARDS as Card[]);\n\n  function addCard(newCard: Card) {\n    setDeck([...deck, newCard]);\n  }\n\n  return (\n    <Container className=\"App\">\n      <Row>\n          <ControlPanel\n            showAddCardModal={setVisible} \n            setCard={setActiveCard} \n            reveal={reveal}\n            deck={deck}\n            answerRevealed={answerRevealed}></ControlPanel>\n          <CardViewer card={activeCard} answerRevealed={answerRevealed}></CardViewer>\n          <AddCardModal visible={visible} setVisible={setVisible} addCard={addCard}></AddCardModal>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}